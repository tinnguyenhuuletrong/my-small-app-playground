// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: pkg/rewardpool-grpc-service/proto/rewardpool.proto

package rewardpool_grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RewardPoolService_GetState_FullMethodName = "/rewardpool.RewardPoolService/GetState"
	RewardPoolService_Draw_FullMethodName     = "/rewardpool.RewardPoolService/Draw"
)

// RewardPoolServiceClient is the client API for RewardPoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The reward pool service definition.
type RewardPoolServiceClient interface {
	// Get the current state of the reward pool
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	// Draw items from the reward pool
	Draw(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DrawRequest, DrawResponse], error)
}

type rewardPoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardPoolServiceClient(cc grpc.ClientConnInterface) RewardPoolServiceClient {
	return &rewardPoolServiceClient{cc}
}

func (c *rewardPoolServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, RewardPoolService_GetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPoolServiceClient) Draw(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DrawRequest, DrawResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RewardPoolService_ServiceDesc.Streams[0], RewardPoolService_Draw_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DrawRequest, DrawResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RewardPoolService_DrawClient = grpc.BidiStreamingClient[DrawRequest, DrawResponse]

// RewardPoolServiceServer is the server API for RewardPoolService service.
// All implementations must embed UnimplementedRewardPoolServiceServer
// for forward compatibility.
//
// The reward pool service definition.
type RewardPoolServiceServer interface {
	// Get the current state of the reward pool
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	// Draw items from the reward pool
	Draw(grpc.BidiStreamingServer[DrawRequest, DrawResponse]) error
	mustEmbedUnimplementedRewardPoolServiceServer()
}

// UnimplementedRewardPoolServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRewardPoolServiceServer struct{}

func (UnimplementedRewardPoolServiceServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedRewardPoolServiceServer) Draw(grpc.BidiStreamingServer[DrawRequest, DrawResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Draw not implemented")
}
func (UnimplementedRewardPoolServiceServer) mustEmbedUnimplementedRewardPoolServiceServer() {}
func (UnimplementedRewardPoolServiceServer) testEmbeddedByValue()                           {}

// UnsafeRewardPoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RewardPoolServiceServer will
// result in compilation errors.
type UnsafeRewardPoolServiceServer interface {
	mustEmbedUnimplementedRewardPoolServiceServer()
}

func RegisterRewardPoolServiceServer(s grpc.ServiceRegistrar, srv RewardPoolServiceServer) {
	// If the following call pancis, it indicates UnimplementedRewardPoolServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RewardPoolService_ServiceDesc, srv)
}

func _RewardPoolService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPoolServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPoolService_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPoolServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPoolService_Draw_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RewardPoolServiceServer).Draw(&grpc.GenericServerStream[DrawRequest, DrawResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RewardPoolService_DrawServer = grpc.BidiStreamingServer[DrawRequest, DrawResponse]

// RewardPoolService_ServiceDesc is the grpc.ServiceDesc for RewardPoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RewardPoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rewardpool.RewardPoolService",
	HandlerType: (*RewardPoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _RewardPoolService_GetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Draw",
			Handler:       _RewardPoolService_Draw_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/rewardpool-grpc-service/proto/rewardpool.proto",
}
